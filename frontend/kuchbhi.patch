diff --git a/client/src/Components/SupplyChain/index.js b/client/src/Components/SupplyChain/index.js
index 9f41d3d..f02e3a5 100644
--- a/client/src/Components/SupplyChain/index.js
+++ b/client/src/Components/SupplyChain/index.js
@@ -1,259 +1,332 @@
-import React, { useEffect, useState } from 'react';
-import { ethers } from "ethers";
-import SupplyChain from "../../artifacts/contracts/AmazonDelivery.sol/AmazonDelivery.json";
-import { Snackbar } from "@mui/material";
-import MuiAlert from '@mui/material/Alert';
-
-const Alert = React.forwardRef(function Alert(props, ref) {
-    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
-});
-
-function HomePage() {
-
-    const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
-
-
-    const [orderHistory, setOrderHistory] = useState([{
-        "oid": 0,
-        "orderDetails": {
-            "oid": 0,
-            "boxHash": "",
-            "productId": 0,
-            "orderProductName": "",
-            "orderValue": -1,
-            "customerAddress": ""
-        },
-        "physicalReadings": {
-            "accelerometerX": 0,
-            "accelerometerY": 0,
-            "accelerometerZ": 0
-        },
-        "transferredOnBackend": -1,
-        "transactionTime": -1,
-        "validQuality": true,
-        "currentOwner": "",
-        "refundStatus": true,
-        "ownerType": -1
-    }]);
-
-    const placeOrder = async () => {
-
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-
-        try {
-            const placeOrderDetails = await contract.placeOrder(1, "Coffee", ethers.utils.parseEther("0.01"), "ke474rf", 1, 2, 3, 1234, { gasLimit: 3000000, value: ethers.utils.parseEther("0.01") });
-            placeOrderDetails.wait();
-            console.log(placeOrderDetails);
-            setSuccessSnackbarMessage("Order Placed")
-            handleClickSuccess();
-        }
-        catch (err) {
-            setErrorSnackbarMessage(err.message);
-            handleClickError();
-        }
-
-    }
-
-    const getOrderDetails = async () => {
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        // const provider = new ethers.providers.JsonRpcProvider("http://localhost:8545");
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-        // const contract = new ethers.Contract(contractAddress, SupplyChain.abi, provider);
-
-        try {
-            const orderHistoryDetails = await contract.getOrderStatus(1);
-            const setValOrderHistory = () => {
-                let returnVal = [];
-                for (let i = 0; i < orderHistoryDetails.length; i++) {
-                    const itrValue = {
-                        oid: orderHistoryDetails[i].oid.toNumber(),
-                        orderDetails: {
-                            oid: orderHistoryDetails[i].orderDetails.oid.toNumber(),
-                            boxHash: orderHistoryDetails[i].orderDetails.boxHash,
-                            productId: orderHistoryDetails[i].orderDetails.productId.toNumber(),
-                            orderProductName: orderHistoryDetails[i].orderDetails.orderProductName,
-                            orderValue: orderHistoryDetails[i].orderDetails.orderValue.toNumber(),
-                            customerAddress: orderHistoryDetails[i].orderDetails.customerAddress
-                        },
-                        physicalReadings: {
-                            accelerometerX: orderHistoryDetails[i].physicalReadings.accelerometerX.toNumber(),
-                            accelerometerY: orderHistoryDetails[i].physicalReadings.accelerometerY.toNumber(),
-                            accelerometerZ: orderHistoryDetails[i].physicalReadings.accelerometerZ.toNumber(),
-                        },
-                        transferredOnBackend: orderHistoryDetails[i].transferredOnBackend,
-                        transactionTime: orderHistoryDetails[i].transactionTime.toNumber(),
-                        validQuality: orderHistoryDetails[i].validQuality,
-                        currentOwner: orderHistoryDetails[i].currentOwner,
-                        refundStatus: orderHistoryDetails[i].refundStatus,
-                        ownerType: orderHistoryDetails[i].ownerType
-                    }
-                    returnVal.push(itrValue);
-                }
-                return returnVal;
-            }
-            setOrderHistory(setValOrderHistory);
-        }
-        catch (err) {
-            setErrorSnackbarMessage(err.message);
-            handleClickError();
-        }
-    }
-
-    const transferOrderDetails = async () => {
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-
-        try {
-            const orderTransferDetails = await contract.transferOrder(1, "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", 2, 2, 4, { gasLimit: 3000000 });
-            orderTransferDetails.wait();
-            console.log(orderTransferDetails);
-            setSuccessSnackbarMessage("Order transferred successfully");
-            handleClickSuccess();
-        } catch (err) {
-            if (err.message.search("Current owner nor carrying out transaction") !== -1)
-                setErrorSnackbarMessage("Access Denied: Current owner nor carrying out transaction");
-            else if (err.message.search("function selector was not recognized and there's no fallback function") !== -1)
-                setErrorSnackbarMessage("Order Doesn't exist");
-            else
-                setErrorSnackbarMessage(err.message);
-            handleClickError();
-        }
-    }
-
-    const refundTransaction = async () => {
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-
-        try {
-            const approveRefund = await contract.approveRefund(1, { gasLimit: 3000000 });
-            approveRefund.wait();
-            console.log(approveRefund);
-            setSuccessSnackbarMessage("Order transferred successfully");
-            handleClickSuccess();
-        } catch (err) {
-            if (err.message.search("Access to refund Denied") !== -1)
-                setErrorSnackbarMessage("Access Denied: Only seller can carry out transaction");
-            else if (err.mAlertessage.search("function selector was not recognized and there's no fallback function") !== -1)
-                setErrorSnackbarMessage("Order Doesn't exist");
-            else
-                setErrorSnackbarMessage(err.message);
-            handleClickError();
-        }
-    }
-
-
-
-
-
-    const [openSuccessSnackbar, setOpenSuccessSnackbar] = React.useState(false);
-    const [successSnackbarMessage, setSuccessSnackbarMessage] = useState("");
-    const handleClickSuccess = () => {
-        setOpenSuccessSnackbar(true);
-    };
-
-    const handleCloseSuccess = (event, reason) => {
-        if (reason === 'clickaway') {
-            return;
-        }
-        setOpenSuccessSnackbar(false);
-    };
-
-
-    const successSnackbar = () => {
-        return (
-            <Snackbar open={openSuccessSnackbar} autoHideDuration={6000} onClose={handleCloseSuccess}>
-                <Alert onClose={handleCloseSuccess} severity="success" sx={{ width: '100%' }}>
-                    {successSnackbarMessage}
-                </Alert>
-            </Snackbar>
-        )
-    }
-    const [openErrorSnackbar, setOpenErrorSnackbar] = React.useState(false);
-    const [errorSnackbarMessage, setErrorSnackbarMessage] = useState("");
-
-    const handleClickError = () => {
-        setOpenErrorSnackbar(true);
-    };
-
-    const handleCloseError = (event, reason) => {
-        if (reason === 'clickaway') {
-            return;
-        }
-        setOpenErrorSnackbar(false);
-    };
-
-
-    const errorSnackbar = () => {
-        return (
-            <Snackbar open={openErrorSnackbar} autoHideDuration={6000} onClose={handleCloseError}>
-                <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
-                    {errorSnackbarMessage}
-                </Alert>
-            </Snackbar>
-        )
-    }
-
-    const [contractBalance, setContractBalance] = useState("");
-
-    const fetchContractBalance = async () => {
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-
-        const contractBalance = await contract.provider.getBalance(contract.address)
-        console.log(ethers.utils.formatEther(contractBalance));
-        setContractBalance(ethers.utils.formatEther(contractBalance));
-
-    }
-
-    const [customerBalance, setCustomerBalance] = useState("");
-
-    const fetchCustomerBalance = async () => {
-        const provider = new ethers.providers.Web3Provider(window.ethereum);
-        const signer = provider.getSigner();
-        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-
-        const customerBalanceVal = await provider.getBalance("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC");
-        console.log(ethers.utils.formatEther(customerBalanceVal));
-        setCustomerBalance(ethers.utils.formatEther(customerBalanceVal));
-
-    }
-
-    return (
-        <div className='wrapper'>
-            <button className="placeOrder" onClick={placeOrder}>
-                placeOrder
-            </button>
-            <button className="getOrderDetails" onClick={getOrderDetails}>
-                get order details
-            </button>
-            <button className="openSnackbar" onClick={handleClickSuccess}>
-                success sb
-            </button>
-            <button className="openErrorSnackbar" onClick={handleClickError}>
-                error sb
-            </button>
-            <button className="transferOrder" onClick={transferOrderDetails}>
-                Transfer Order
-            </button>
-            <button className="refundAmount" onClick={refundTransaction}>
-                Refund Transaction
-            </button>
-            <div className="customerBalance" onClick={fetchCustomerBalance}>
-                Fetch Customer Balance: {customerBalance}
-            </div>
-            <div className="customerBalance" onClick={fetchContractBalance}>
-                Fetch Contract Balance: {contractBalance}
-            </div>
-            {successSnackbar()}
-            {errorSnackbar()}
-        </div>
-    );
-}
-
-export default HomePage;
\ No newline at end of file
+// import React, { useEffect, useState } from 'react';
+// import { ethers } from "ethers";
+// import SupplyChain from "../../artifacts/contracts/AmazonDelivery.sol/AmazonDelivery.json";
+// import { Snackbar } from "@mui/material";
+// import MuiAlert from '@mui/material/Alert';
+//
+// const Alert = React.forwardRef(function Alert(props, ref) {
+//     return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
+// });
+//
+// function HomePage() {
+//
+//     const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
+//
+//
+//     const [orderHistory, setOrderHistory] = useState([{
+//         "oid": 0,
+//         "orderDetails": {
+//             "oid": 0,
+//             "boxHash": "",
+//             "productId": 0,
+//             "orderProductName": "",
+//             "orderValue": -1,
+//             "customerAddress": ""
+//         },
+//         "physicalReadings": {
+//             "accelerometerX": 0,
+//             "accelerometerY": 0,
+//             "accelerometerZ": 0
+//         },
+//         "transferredOnBackend": -1,
+//         "transactionTime": -1,
+//         "validQuality": true,
+//         "currentOwner": "",
+//         "refundStatus": true,
+//         "ownerType": -1
+//     }]);
+//
+//     const placeOrder = async () => {
+//
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         try {
+//             const placeOrderDetails = await contract.placeOrder(1, "Coffee", ethers.utils.parseEther("0.01"), "ke474rf", 1, 2, 3, 1234, { gasLimit: 3000000, value: ethers.utils.parseEther("0.01") });
+//             placeOrderDetails.wait();
+//             console.log(placeOrderDetails);
+//             setSuccessSnackbarMessage("Order Placed")
+//             handleClickSuccess();
+//         }
+//         catch (err) {
+//             setErrorSnackbarMessage(err.message);
+//             handleClickError();
+//         }
+//
+//     }
+//
+//     const getOrderDetails = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         // const provider = new ethers.providers.JsonRpcProvider("http://localhost:8545");
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//         // const contract = new ethers.Contract(contractAddress, SupplyChain.abi, provider);
+//
+//         try {
+//             const orderHistoryDetails = await contract.getOrderStatus(1);
+//             const setValOrderHistory = () => {
+//                 let returnVal = [];
+//                 for (let i = 0; i < orderHistoryDetails.length; i++) {
+//                     const itrValue = {
+//                         oid: orderHistoryDetails[i].oid.toNumber(),
+//                         orderDetails: {
+//                             oid: orderHistoryDetails[i].orderDetails.oid.toNumber(),
+//                             boxHash: orderHistoryDetails[i].orderDetails.boxHash,
+//                             productId: orderHistoryDetails[i].orderDetails.productId.toNumber(),
+//                             orderProductName: orderHistoryDetails[i].orderDetails.orderProductName,
+//                             orderValue: orderHistoryDetails[i].orderDetails.orderValue.toNumber(),
+//                             customerAddress: orderHistoryDetails[i].orderDetails.customerAddress
+//                         },
+//                         physicalReadings: {
+//                             accelerometerX: orderHistoryDetails[i].physicalReadings.accelerometerX.toNumber(),
+//                             accelerometerY: orderHistoryDetails[i].physicalReadings.accelerometerY.toNumber(),
+//                             accelerometerZ: orderHistoryDetails[i].physicalReadings.accelerometerZ.toNumber(),
+//                         },
+//                         transferredOnBackend: orderHistoryDetails[i].transferredOnBackend,
+//                         transactionTime: orderHistoryDetails[i].transactionTime.toNumber(),
+//                         validQuality: orderHistoryDetails[i].validQuality,
+//                         currentOwner: orderHistoryDetails[i].currentOwner,
+//                         refundStatus: orderHistoryDetails[i].refundStatus,
+//                         ownerType: orderHistoryDetails[i].ownerType
+//                     }
+//                     returnVal.push(itrValue);
+//                 }
+//                 return returnVal;
+//             }
+//             setOrderHistory(setValOrderHistory);
+//         }
+//         catch (err) {
+//             setErrorSnackbarMessage(err.message);
+//             handleClickError();
+//         }
+//     }
+//
+//     const transferOrderDetails = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         try {
+//             const orderTransferDetails = await contract.transferOrder(1, "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", 2, 2, 4, { gasLimit: 3000000 });
+//             orderTransferDetails.wait();
+//             console.log(orderTransferDetails);
+//             setSuccessSnackbarMessage("Order transferred successfully");
+//             handleClickSuccess();
+//         } catch (err) {
+//             if (err.message.search("Current owner nor carrying out transaction") !== -1)
+//                 setErrorSnackbarMessage("Access Denied: Current owner nor carrying out transaction");
+//             else if (err.message.search("function selector was not recognized and there's no fallback function") !== -1)
+//                 setErrorSnackbarMessage("Order Doesn't exist");
+//             else
+//                 setErrorSnackbarMessage(err.message);
+//             handleClickError();
+//         }
+//     }
+//
+//     const refundTransaction = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         try {
+//             const approveRefund = await contract.approveRefund(1, { gasLimit: 3000000 });
+//             approveRefund.wait();
+//             console.log(approveRefund);
+//             setSuccessSnackbarMessage("Order transferred successfully");
+//             handleClickSuccess();
+//         } catch (err) {
+//             if (err.message.search("Access to refund Denied") !== -1)
+//                 setErrorSnackbarMessage("Access Denied: Only seller can carry out transaction");
+//             else if (err.mAlertessage.search("function selector was not recognized and there's no fallback function") !== -1)
+//                 setErrorSnackbarMessage("Order Doesn't exist");
+//             else
+//                 setErrorSnackbarMessage(err.message);
+//             handleClickError();
+//         }
+//     }
+//
+//
+//
+//     const [openSuccessSnackbar, setOpenSuccessSnackbar] = React.useState(false);
+//     const [successSnackbarMessage, setSuccessSnackbarMessage] = useState("");
+//     const handleClickSuccess = () => {
+//         setOpenSuccessSnackbar(true);
+//     };
+//
+//     const handleCloseSuccess = (event, reason) => {
+//         if (reason === 'clickaway') {
+//             return;
+//         }
+//         setOpenSuccessSnackbar(false);
+//     };
+//
+//
+//     const successSnackbar = () => {
+//         return (
+//             <Snackbar open={openSuccessSnackbar} autoHideDuration={6000} onClose={handleCloseSuccess}>
+//                 <Alert onClose={handleCloseSuccess} severity="success" sx={{ width: '100%' }}>
+//                     {successSnackbarMessage}
+//                 </Alert>
+//             </Snackbar>
+//         )
+//     }
+//     const [openErrorSnackbar, setOpenErrorSnackbar] = React.useState(false);
+//     const [errorSnackbarMessage, setErrorSnackbarMessage] = useState("");
+//
+//     const handleClickError = () => {
+//         setOpenErrorSnackbar(true);
+//     };
+//
+//     const handleCloseError = (event, reason) => {
+//         if (reason === 'clickaway') {
+//             return;
+//         }
+//         setOpenErrorSnackbar(false);
+//     };
+//
+//
+//     const errorSnackbar = () => {
+//         return (
+//             <Snackbar open={openErrorSnackbar} autoHideDuration={6000} onClose={handleCloseError}>
+//                 <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
+//                     {errorSnackbarMessage}
+//                 </Alert>
+//             </Snackbar>
+//         )
+//     }
+//
+//     const [contractBalance, setContractBalance] = useState("");
+//
+//     const fetchContractBalance = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         const contractBalance = await contract.provider.getBalance(contract.address)
+//         console.log(ethers.utils.formatEther(contractBalance));
+//         setContractBalance(ethers.utils.formatEther(contractBalance));
+//
+//     }
+//
+//     const [customerBalance, setCustomerBalance] = useState("");
+//
+//     const fetchCustomerBalance = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         const customerBalanceVal = await provider.getBalance("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC");
+//         console.log(ethers.utils.formatEther(customerBalanceVal));
+//         setCustomerBalance(ethers.utils.formatEther(customerBalanceVal));
+//
+//     }
+//
+//
+//     const [openSuccessSnackbar, setOpenSuccessSnackbar] = React.useState(false);
+//     const [successSnackbarMessage, setSuccessSnackbarMessage] = useState("");
+//     const handleClickSuccess = () => {
+//         setOpenSuccessSnackbar(true);
+//     };
+//
+//     const handleCloseSuccess = (event, reason) => {
+//         if (reason === 'clickaway') {
+//             return;
+//         }
+//         setOpenSuccessSnackbar(false);
+//     };
+//
+//
+//     const successSnackbar = () => {
+//         return (
+//             <Snackbar open={openSuccessSnackbar} autoHideDuration={6000} onClose={handleCloseSuccess}>
+//                 <Alert onClose={handleCloseSuccess} severity="success" sx={{ width: '100%' }}>
+//                     {successSnackbarMessage}
+//                 </Alert>
+//             </Snackbar>
+//         )
+//     }
+//     const [openErrorSnackbar, setOpenErrorSnackbar] = React.useState(false);
+//     const [errorSnackbarMessage, setErrorSnackbarMessage] = useState("");
+//
+//     const handleClickError = () => {
+//         setOpenErrorSnackbar(true);
+//     };
+//
+//     const handleCloseError = (event, reason) => {
+//         if (reason === 'clickaway') {
+//             return;
+//         }
+//         setOpenErrorSnackbar(false);
+//     };
+//
+//
+//     const errorSnackbar = () => {
+//         return (
+//             <Snackbar open={openErrorSnackbar} autoHideDuration={6000} onClose={handleCloseError}>
+//                 <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
+//                     {errorSnackbarMessage}
+//                 </Alert>
+//             </Snackbar>
+//         )
+//     }
+//
+//     const [contractBalance, setContractBalance] = useState("");
+//
+//     const fetchContractBalance = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         const contractBalance = await contract.provider.getBalance(contract.address)
+//         console.log(ethers.utils.formatEther(contractBalance));
+//         setContractBalance(ethers.utils.formatEther(contractBalance));
+//
+//     }
+//
+//     const [customerBalance, setCustomerBalance] = useState("");
+//
+//     const fetchCustomerBalance = async () => {
+//         const provider = new ethers.providers.Web3Provider(window.ethereum);
+//         const signer = provider.getSigner();
+//         const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+//
+//         const customerBalanceVal = await provider.getBalance("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC");
+//         console.log(ethers.utils.formatEther(customerBalanceVal));
+//         setCustomerBalance(ethers.utils.formatEther(customerBalanceVal));
+//
+//     }
+//
+//     return (
+//         <div className='wrapper'>
+//             <button className="placeOrder" onClick={placeOrder}>
+//                 placeOrder
+//             </button>
+//             <button className="getOrderDetails" onClick={getOrderDetails}>
+//                 get order details
+//             </button>
+//             <button className="openSnackbar" onClick={handleClickSuccess}>
+//                 success sb
+//             </button>
+//             <button className="openErrorSnackbar" onClick={handleClickError}>
+//                 error sb
+//             </button>
+//             <button className="transferOrder" onClick={transferOrderDetails}>
+//                 Transfer Order
+//             </button>
+//             <button className="refundAmount" onClick={refundTransaction}>
+//                 Refund Transaction
+//             </button>
+//             <div className="customerBalance" onClick={fetchCustomerBalance}>
+//                 Fetch Customer Balance: {customerBalance}
+//             </div>
+//             <div className="customerBalance" onClick={fetchContractBalance}>
+//                 Fetch Contract Balance: {contractBalance}
+//             </div>
+//             {successSnackbar()}
+//             {errorSnackbar()}
+//         </div>
+//     );
+// }
+//
+// export default HomePage;
\ No newline at end of file
diff --git a/client/src/Components/UserHomePage/common/AmazonDrawer.js b/client/src/Components/UserHomePage/common/AmazonDrawer.js
index 42064bf..bca1f0c 100644
--- a/client/src/Components/UserHomePage/common/AmazonDrawer.js
+++ b/client/src/Components/UserHomePage/common/AmazonDrawer.js
@@ -32,8 +32,9 @@ import SavingsIcon from '@mui/icons-material/Savings';
 const drawerWidth = 240;
 
 function AmazonDrawer(props) {
+
   const { window } = props;
-  const { user, loggedIn } = React.useContext(AuthContext);
+  const { user, loggedIn, logout } = React.useContext(AuthContext);
   const [mobileOpen, setMobileOpen] = React.useState(false);
   const [currComponent, setCurrComponent] = React.useState(<Market />);
   let components;
@@ -85,7 +86,7 @@ function AmazonDrawer(props) {
         <ListItem key={'logout'} disablePadding >
           <ListItemButton>
             <ListItemIcon>
-              <LogoutIcon />
+              <LogoutIcon onClick={logout}/>
             </ListItemIcon>
             <ListItemText primary={'Logout'} />
           </ListItemButton>
diff --git a/client/src/Components/UserHomePage/common/ItemCard.js b/client/src/Components/UserHomePage/common/ItemCard.js
index 39d398e..9d32c43 100644
--- a/client/src/Components/UserHomePage/common/ItemCard.js
+++ b/client/src/Components/UserHomePage/common/ItemCard.js
@@ -103,11 +103,8 @@ export default function ItemCard({ item, sellerItem }) {
             },
             "body": JSON.stringify({ itemId: id })
         }).then(res => res.json())
-        console.log(createOrder.stacId);
-        // const placeOrderDetails = await contract.placeOrder(1, "Coffee", ethers.utils.parseEther("0.01"), "ke474rf", 1, 2, 3, 1234, {gasLimit: 3000000, value: ethers.utils.parseEther("0.01")} );
 
-        await placeOrder(createOrder.orderId, id, name, price.toString(), createOrder.stacId, 1, 2, 3, createOrder.timestamp);
-        console.log("asd")
+        await placeOrder(createOrder.orderId, id, name, price.toString(), createOrder.stacId, 1, 235, 35, createOrder.timestamp);
     }
 
     async function deleteItem({ id }) {
@@ -141,7 +138,7 @@ export default function ItemCard({ item, sellerItem }) {
                 </Typography>
             </CardContent>
             <CardActions>
-                {sellerItem ? <></> : <Button variant="contained" size="small">Buy Now</Button>}
+                {sellerItem ? <></> : <Button variant="contained" size="small" onClick={()=> buyOrder(item._id, item.name, item.price)}>Buy Now</Button>}
                 {/* <Button size="small">Learn More</Button> */}
             </CardActions >
         </Card >
diff --git a/client/src/Components/UserHomePage/common/OrderCard.js b/client/src/Components/UserHomePage/common/OrderCard.js
index ddc8685..62b80f5 100644
--- a/client/src/Components/UserHomePage/common/OrderCard.js
+++ b/client/src/Components/UserHomePage/common/OrderCard.js
@@ -28,68 +28,6 @@ export default function OrderCard({ item }) {
          setOpen(true);
     }
     const handleClose = () => setOpen(false);
-    // const [orderHistory, setOrderHistory] = useState([{
-    //     "oid": 0,
-    //     "orderDetails": {
-    //         "oid": 0,
-    //         "boxHash": "",
-    //         "productId": 0,
-    //         "orderProductName": "",
-    //         "orderValue": -1,
-    //         "customerAddress": ""
-    //     },
-    //     "physicalReadings": {
-    //         "accelerometerX": 0,
-    //         "accelerometerY": 0,
-    //         "accelerometerZ": 0
-    //     },
-    //     "transferredOnBackend": -1,
-    //     "transactionTime": -1,
-    //     "validQuality": true,
-    //     "currentOwner": "",
-    //     "refundStatus": true,
-    //     "ownerType": -1
-    // }]);
-    // const getOrderDetails = async () => {
-    //     // const provider = new ethers.providers.Web3Provider(window.ethereum);
-    //     const provider = new ethers.providers.JsonRpcProvider("http://localhost:8545");
-    //     const signer = provider.getSigner();
-    //     // const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
-    //     const contract = new ethers.Contract(contractAddress, SupplyChain.abi, provider);
-
-    //     try {
-    //         const orderHistoryDetails = await contract.getOrderStatus(item.orderId);
-    //         const setValOrderHistory = () => {
-    //             let returnVal = [];
-    //             for (let i = 0; i < orderHistoryDetails.length; i++) {
-    //                 const itrValue = {
-    //                     oid: orderHistoryDetails[i].oid.toNumber(),
-    //                     orderDetails: {
-    //                         oid: orderHistoryDetails[i].orderDetails.oid.toNumber(),
-    //                         boxHash: orderHistoryDetails[i].orderDetails.boxHash,
-    //                         productId: orderHistoryDetails[i].orderDetails.productId.toNumber(),
-    //                         orderProductName: orderHistoryDetails[i].orderDetails.orderProductName,
-    //                         orderValue: orderHistoryDetails[i].orderDetails.orderValue.toNumber(),
-    //                         customerAddress: orderHistoryDetails[i].orderDetails.customerAddress
-    //                     },
-    //                     physicalReadings: {
-    //                         accelerometerX: orderHistoryDetails[i].physicalReadings.accelerometerX.toNumber(),
-    //                         accelerometerY: orderHistoryDetails[i].physicalReadings.accelerometerY.toNumber(),
-    //                         accelerometerZ: orderHistoryDetails[i].physicalReadings.accelerometerZ.toNumber(),
-    //                     },
-    //                     transferredOnBackend: orderHistoryDetails[i].transferredOnBackend,
-    //                     transactionTime: orderHistoryDetails[i].transactionTime.toNumber(),
-    //                     validQuality: orderHistoryDetails[i].validQuality,
-    //                     currentOwner: orderHistoryDetails[i].currentOwner,
-    //                     refundStatus: orderHistoryDetails[i].refundStatus,
-    //                     ownerType: orderHistoryDetails[i].ownerType
-    //                 }
-    //                 returnVal.push(itrValue);
-    //             }
-    //             return returnVal;
-    //         }
-    //         setOrderHistory(setValOrderHistory);
-    //     }
 
     const [orderHistory, setOrderHistory] = useState([{
         "oid": 0,
@@ -223,11 +161,11 @@ export default function OrderCard({ item }) {
         left: '50%',
         transform: 'translate(-50%, -50%)',
         width: '70%',
-        height: "60%",
+        height: "95%",
         bgcolor: 'background.paper',
         border: '1px solid grey',
         boxShadow: 24,
-        p: 4,
+        p: 3,
         borderRadius: "12px"
     };
 
@@ -280,9 +218,9 @@ export default function OrderCard({ item }) {
                                           <div>Product ID: {item.orderDetails.productId}</div>
                                           <div>Product Name: {item.orderDetails.orderProductName}</div>
                                           <div>Current Owner: {item.currentOwner}</div>
-                                          <div>Transferred On: {item.transferredOnBackend}</div>
+                                          <div>Accelerometer Readings (x,y,z): ({item.physicalReadings.accelerometerX},{item.physicalReadings.accelerometerY},{item.physicalReadings.accelerometerY})</div>
+
                                         <br />
-                                        <br/>
                                       </>
                                 )
                             })
diff --git a/client/src/Components/UserHomePage/common/Refunds.js b/client/src/Components/UserHomePage/common/Refunds.js
index d4135c9..2bc065f 100644
--- a/client/src/Components/UserHomePage/common/Refunds.js
+++ b/client/src/Components/UserHomePage/common/Refunds.js
@@ -1,4 +1,4 @@
-import { getListItemSecondaryActionClassesUtilityClass } from '@mui/material';
+import {getListItemSecondaryActionClassesUtilityClass, Snackbar} from '@mui/material';
 import React, { useEffect, useState } from 'react'
 import ItemCard from './ItemCard';
 import { experimentalStyled as styled } from '@mui/material/styles';
@@ -8,7 +8,22 @@ import Grid from '@mui/material/Grid';
 import OrderCard from './OrderCard';
 import { ethers } from 'ethers';
 import RefundCard from './RefundCard'
+import SupplyChain from "../../../artifacts/contracts/AmazonDelivery.sol/AmazonDelivery.json";
+import MuiAlert from '@mui/material/Alert';
+import Button from "@mui/material/Button";
+import TextField from "@mui/material/TextField";
+
+const Alert = React.forwardRef(function Alert(props, ref) {
+    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
+});
+
 export default function Refunds({ person }) {
+
+    const [refundAddress, setRefundAddress] = useState("");
+    const [orderIDValue, setOrderIDValue] = useState("");
+    const [refundOrderID, setRefundOrderID] = useState("");
+
+    const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
     const [items, setItems] = useState(undefined);
 
     async function getItems() {
@@ -22,23 +37,165 @@ export default function Refunds({ person }) {
     async function fetchItems() {
         setItems(await getItems());
     }
+
+    const refundTransaction = async () => {
+        const provider = new ethers.providers.Web3Provider(window.ethereum);
+        const signer = provider.getSigner();
+        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+
+        try {
+            const approveRefund = await contract.approveRefund(refundOrderID, { gasLimit: 3000000 });
+            approveRefund.wait();
+            console.log(approveRefund);
+            setSuccessSnackbarMessage("Order transferred successfully");
+            handleClickSuccess();
+        } catch (err) {
+            if (err.message.search("Access to refund Denied") !== -1)
+                setErrorSnackbarMessage("Access Denied: Only seller can carry out transaction");
+            else if (err.mAlertessage.search("function selector was not recognized and there's no fallback function") !== -1)
+                setErrorSnackbarMessage("Order Doesn't exist");
+            else
+                setErrorSnackbarMessage(err.message);
+            handleClickError();
+        }
+    }
+
+
+    const [openSuccessSnackbar, setOpenSuccessSnackbar] = React.useState(false);
+    const [successSnackbarMessage, setSuccessSnackbarMessage] = useState("");
+    const handleClickSuccess = () => {
+        setOpenSuccessSnackbar(true);
+    };
+
+    const handleCloseSuccess = (event, reason) => {
+        if (reason === 'clickaway') {
+            return;
+        }
+        setOpenSuccessSnackbar(false);
+    };
+
+
+    const successSnackbar = () => {
+        return (
+            <Snackbar open={openSuccessSnackbar} autoHideDuration={6000} onClose={handleCloseSuccess}>
+                <Alert onClose={handleCloseSuccess} severity="success" sx={{ width: '100%' }}>
+                    {successSnackbarMessage}
+                </Alert>
+            </Snackbar>
+        )
+    }
+    const [openErrorSnackbar, setOpenErrorSnackbar] = React.useState(false);
+    const [errorSnackbarMessage, setErrorSnackbarMessage] = useState("");
+
+    const handleClickError = () => {
+        setOpenErrorSnackbar(true);
+    };
+
+    const handleCloseError = (event, reason) => {
+        if (reason === 'clickaway') {
+            return;
+        }
+        setOpenErrorSnackbar(false);
+    };
+
+
+    const errorSnackbar = () => {
+        return (
+            <Snackbar open={openErrorSnackbar} autoHideDuration={6000} onClose={handleCloseError}>
+                <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
+                    {errorSnackbarMessage}
+                </Alert>
+            </Snackbar>
+        )
+    }
+
+    const [contractBalance, setContractBalance] = useState("");
+
+    const fetchContractBalance = async () => {
+        const provider = new ethers.providers.Web3Provider(window.ethereum);
+        const signer = provider.getSigner();
+        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+
+        const contractBalance = await contract.provider.getBalance(contract.address)
+        console.log(ethers.utils.formatEther(contractBalance));
+        setContractBalance(ethers.utils.formatEther(contractBalance));
+
+    }
+
+    const [customerBalance, setCustomerBalance] = useState("");
+
+    const fetchCustomerBalance = async () => {
+        const provider = new ethers.providers.Web3Provider(window.ethereum);
+        const signer = provider.getSigner();
+        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+
+        const customerBalanceVal = await provider.getBalance("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC");
+        console.log(ethers.utils.formatEther(customerBalanceVal));
+        setCustomerBalance(ethers.utils.formatEther(customerBalanceVal));
+
+    }
+
+        const transferOrderDetails = async () => {
+        const provider = new ethers.providers.Web3Provider(window.ethereum);
+        const signer = provider.getSigner();
+        const contract = new ethers.Contract(contractAddress, SupplyChain.abi, signer);
+
+        try {
+            const orderTransferDetails = await contract.transferOrder(orderIDValue, refundAddress, 76, 27, 441, { gasLimit: 3000000 });
+            orderTransferDetails.wait();
+            console.log(orderTransferDetails);
+            setSuccessSnackbarMessage("Order transferred successfully");
+            handleClickSuccess();
+        } catch (err) {
+            if (err.message.search("Current owner nor carrying out transaction") !== -1)
+                setErrorSnackbarMessage("Access Denied: Current owner nor carrying out transaction");
+            else if (err.message.search("function selector was not recognized and there's no fallback function") !== -1)
+                setErrorSnackbarMessage("Order Doesn't exist");
+            else
+                setErrorSnackbarMessage(err.message);
+            handleClickError();
+        }
+    }
+
+
+
     useEffect(() => {
         fetchItems();
     }, [])
     console.log(items);
     return (
+        <div>
+        <div id="market-div">
+            <TextField id="outlined-basic" label="Refund Order ID" variant="outlined" onChange={(e)=> setRefundOrderID(e.target.value)}/>
+            <div/>
+            <br />
+            <Button variant="contained" className="refundAmount" onClick={refundTransaction}>
+                Refund Transaction
+            </Button>
+            <br />
+            <Button className="customerBalance" onClick={fetchCustomerBalance}>
+                Fetch Customer Balance: {customerBalance}
+            </Button>
+            <br />
+            <Button className="customerBalance" onClick={fetchContractBalance}>
+                Fetch Contract Balance: {contractBalance}
+            </Button>
+        </div>
+            <br /><br />
         <div id="market-div">
-            <h1>Refunds</h1>
-            {items !== undefined ?
-                <Grid container spacing={{ xs: 2, md: 2 }} columns={{ xs: 4, sm: 8, md: 12 }}>{
-                    items.map((item, index) => {
-                        return (
-                            <Grid item xs={2} sm={3} md={3} lg={3} key={index}>
-                                <RefundCard item={item} />
-                            </Grid>
-                        )
-                    })}
-                </Grid> : <>No refunds</>}
+            <TextField id="outlined-basic" label="Order ID" variant="outlined" onChange={(e)=> setOrderIDValue(e.target.value)}/>
+            <div/>
+            <br />
+            <TextField id="outlined-basic" label="Transfer Address" variant="outlined" onChange={(e)=> setRefundAddress(e.target.value)}/>
+            <div/>
+            <br />
+            <Button variant="contained" className="refundAmount" onClick={transferOrderDetails}>
+                Transfer
+            </Button>
+            <br />
+        </div>
+            {successSnackbar()}
+            {errorSnackbar()}
         </div>
     );
 }
\ No newline at end of file
diff --git a/client/src/context/Authcontext.js b/client/src/context/Authcontext.js
index 58ee83a..5f5d40e 100644
--- a/client/src/context/Authcontext.js
+++ b/client/src/context/Authcontext.js
@@ -38,7 +38,7 @@ export const AuthContextProvider = ({ children }) => {
         setLoggedIn(false);
         setUser(null);
         localStorage.setItem("authtoken", null);
-        window.location.pathname = "/";
+        window.location.pathname = "/signup/seller";
         setIsLoading(false);
     };
 
